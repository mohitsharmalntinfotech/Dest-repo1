/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lti.controllers;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-10T00:19:03.401045200+05:30[Asia/Calcutta]")

@Validated
@Api(value = "health", description = "the health API")
public interface HealthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /health : health check API
     * method gives health status of app
     *
     * @param appName param with App name (required)
     * @return App up or down status (status code 200)
     *         or bad input parameter (status code 400)
     */
    @ApiOperation(value = "health check API", nickname = "healthChecking", notes = "method gives health status of app", response = String.class, tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "App up or down status", response = String.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/health",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> healthChecking(@NotNull @ApiParam(value = "param with App name", required = true) @Valid @RequestParam(value = "appName", required = true) String appName) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
